# 指定环境
spring:
  profiles:
    active: local

# 以下部分为各个环境不同的配置
---

# 本地开发环境，主要是忽略user和password
spring:
  profiles: local

server:
  port: 8000

eureka:
  instance:
    hostname: localhost
  client:
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://localhost:8000/eureka
---

# 集群环境peer1
spring:
  profiles: peer1

server:
  port: 8001

eureka:
  instance:
    hostname: peer1
  client:
    registerWithEureka: true
    serviceUrl:
      # 通过环境变量设置用户密码
      # 1. java命令执行的时候，加入环境变量
      #    java -jar -Dspring.profiles.active=default -Dspring.application.json='{"eureka":{"security":{"username":"user","password":"ws123456"}}}' target/springcloud-registry.jar
      # 2. Docker执行时加入环境变量
      # 3. Docker打包镜像时加入环境变量
      # 4. k8s指定环境变量
      defaultZone: "http://${eureka.security.username}:${eureka.security.password}@peer1:8001/eureka,\
      http://${eureka.security.username}:${eureka.security.password}@peer2:8002/eureka,\
      http://${eureka.security.username}:${eureka.security.password}@peer3:8003/eureka"

---

# 集群环境peer2
spring:
  profiles: peer2

server:
  port: 8002

eureka:
  instance:
    hostname: peer2
  client:
    registerWithEureka: true
    serviceUrl:
      defaultZone: "http://${eureka.security.username}:${eureka.security.password}@peer1:8001/eureka,\
      http://${eureka.security.username}:${eureka.security.password}@peer2:8002/eureka,\
      http://${eureka.security.username}:${eureka.security.password}@peer3:8003/eureka"
---

# 集群环境peer3
spring:
  profiles: peer3

server:
  port: 8003

eureka:
  instance:
    hostname: peer3
  client:
    registerWithEureka: true
    serviceUrl:
      defaultZone: "http://${eureka.security.username}:${eureka.security.password}@peer1:8001/eureka,\
      http://${eureka.security.username}:${eureka.security.password}@peer2:8002/eureka,\
      http://${eureka.security.username}:${eureka.security.password}@peer3:8003/eureka"
---